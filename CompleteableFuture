package object;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

public class CallableAndFutureExample {
	static ExecutorService executorService = Executors.newSingleThreadExecutor();

	public static void main(String args[]) throws InterruptedException, ExecutionException {
		Shared runn = new Shared();

		Future<String> ans = new CallableAndFutureExample().calculateAsync();

		System.out.println("Ans is ::: " + ans.get());

	}

	public Future<String> calculateAsync() {
		CompletableFuture<String> completableFuture = new CompletableFuture<>();

		Executors.newCachedThreadPool().submit(() -> {
			Thread.sleep(500);
			completableFuture.complete("Hello");
			return null;
		});

		return completableFuture;
	}

}

class Shared implements Callable<String> {

	@Override
	public String call() {
		return "test";

	}

}

class Result {

}
