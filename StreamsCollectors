package collectionsPackage;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import javax.swing.ToolTipManager;

//https://docs.oracle.com/javase/tutorial/essential/concurrency/
public class CollSample {

	public static void main(String arsg[]) {
		List<Integer> lst = Arrays.asList(1, 2, 3, 4, 4, 5, 5, 5);

		List<Integer> lst1 = lst.stream().filter(val -> val % 2 == 0).collect(Collectors.toList());

		lst1.forEach(v -> System.out.print(v));
		System.out.println(" ---------------");

		List<Integer> lst2 = lst.stream().distinct().collect(Collectors.toList());

		lst2.forEach(v -> System.out.print(v));
		System.out.println(" ---------------");

		List<Integer> lst3 = lst.stream().map(x -> x * x).sorted().collect(Collectors.toList());

		lst3.forEach(v -> System.out.print(v));
		System.out.println(" ---------------");

		int sum = lst.stream().reduce(0, (ans, i) -> ans + i);
		System.out.println(" -------sum --------" + sum);

		Set<Integer> st = lst.stream().map(v -> v * v).collect(Collectors.toSet());

		st.forEach((ans) -> System.out.println(" > " + ans));
		System.out.println(" ---------------");

		Map<Integer, Long> mp = lst.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		mp.forEach((k, v) -> System.out.println(" k: " + k + " v: " + v));

		List<String> lstOfString = Arrays.asList("akhil", "kumar", "gupta");

		/*
		 * Optional<String> res = lstOfString.stream()
		 * .collect(maxBy(Comparator.naturalOrder()));
		 * 
		 */

		// predicate sample
	

		Predicate<Integer> lessThan = i -> (i < 10);

		System.out.println(" predicate sample " + lessThan.test(9));
		System.out.println(" predicate sample " + lessThan.test(11));

	}

}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

package threadSample;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;

class Resource {

	public static synchronized void iterator() {
		// synchronized (Resource.class) { // class level synchronized
		// synchronized (this) { // object level
		for (int i = 1; i < 5; i++) {
			System.out.println("=========> " + Thread.currentThread().getName());
		}

		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

//	}

}

class MyCallable implements Callable<Integer> {

	int val = 0;

	@Override
	public Integer call() throws Exception {
		// TODO Auto-generated method stub
		return val++;
	}

}

public class ThreadSample {
	public static void main(String args[]) {
		
		
		
		
		List<String> lst = Arrays.asList("akhil","kumar","gupta","solanssssssss","kumar");		
		
		Set<String> st = lst
			.stream()
				.collect(Collectors.toSet());
		
		st.forEach(val -> System.out.println(" "+ val));
		
		System.out.println("<-------------------------->");
		
		List<String> modList =
		lst.stream().filter(val -> val.length()==5).collect(Collectors.toList());
		
		modList.forEach(val -> System.out.println(" "+ val));
		
		
		Map<String,Long> map = lst.stream()
				.collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
		
		map.forEach((k,v) -> System.out.println(" key : "+ k +"  value is : "+ v));
		
		
		List<String> lst1 =  Arrays.asList("india","austrailia","zambia");
		
		List<List<String>> res = new ArrayList<>();
		
		res.add(lst1);
		res.add(lst);
		
		
		List<String> flatMapRes =
		res.stream().flatMap(val -> val.stream())
						.collect(Collectors.toList());
		
		System.out.println(" res is " + flatMapRes);
		
		
		
		
						
		
		
		
		
		
		/*MyCallable myCallable = new MyCallable();
	    List<Future<Integer>> res = new ArrayList<>();
		ExecutorService service = Executors.newFixedThreadPool(5);

		List<Future<Integer>> comRes = new ArrayList<>();

		for (int i = 0; i < 5; i++) {
			int val = 1;
			CompletableFuture<Integer> f = CompletableFuture.supplyAsync(new Supplier<Integer>() {
				public Integer get() {

					return 100;
				}
			});

			while (!f.isDone()) {
				System.out.println("<-------- waiting------>");
				try {
					TimeUnit.SECONDS.sleep(2);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			comRes.add(f);

			comRes.forEach((c) -> System.out.println(">> " + c));

		}

		
		  for (int i = 0; i < 5; i++) { Future<Integer> f = service.submit(myCallable);
		  while (!f.isDone()) { try { Thread.sleep(2000); } catch (InterruptedException
		  e) { // TODO Auto-generated catch block e.printStackTrace(); }
		  System.out.println(" Waiting........."); }
		  
		  res.add(f);
		  
		  }
		  
		  res.forEach((ans) -> {
			try {
				System.out.println(" ---> " + ans.get());
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		   
		 

		// System.out.println(" Cllable NOT done ");

	} */
	}
}

