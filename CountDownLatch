package javaItr3;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class App {

	public static void main(String args[]) {
		ExecutorService service = Executors.newFixedThreadPool(5);
		Semaphore semaphore = new Semaphore(2);
		
		CountDownLatch countDownLatch = new CountDownLatch(4);
		
		for (int i = 0; i < 5; i++) {

			Runnable r = () -> {
				try {
					semaphore.acquire();
					//countDownLatch.await();
					System.out.println("Thread running is " + Thread.currentThread().getName());
					TimeUnit.MILLISECONDS.sleep(2000);
					

				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					countDownLatch.countDown();
				semaphore.release();
			};
			service.execute(r);
			
			
			
			
		}
		
		
		try {
			countDownLatch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println(" Latches opened........");
	}
}
