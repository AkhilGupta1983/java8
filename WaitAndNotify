package threadSample;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ThreadSample {

	static Lock l1 = new ReentrantLock();
	static Lock l2 = new ReentrantLock();

	public static void main(String args[]) {

		Runnable r = () -> {
			synchronized (l1) {
				System.out.println(" thread " + Thread.currentThread().getName() + " waiting l1");
				try {
					l1.wait();
				} catch (InterruptedException e) {
					System.out.println("Wait over : continue ");
					e.printStackTrace();
				}

				System.out.println(" thread " + Thread.currentThread().getName() + " RESUME ");

			}

		};

		ExecutorService service = Executors.newFixedThreadPool(3);
		for (int i = 0; i < 3; i++) {
			service.execute(r);
		}

		service.shutdown();

		try {
			Thread.sleep(4000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		new Thread(() -> {
			synchronized (l1) {
				l1.notifyAll();
				System.out.println(" thread " + Thread.currentThread().getName() + " notified ");
			}

		}).start();

	}

}
