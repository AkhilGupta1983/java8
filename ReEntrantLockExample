package object;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class LockExample {

	public static void main(String args[]) {

		Executor executor = Executors.newFixedThreadPool(5);
		ReadWriteLock lock = new ReentrantReadWriteLock();
		Lock readLock = lock.readLock();
		Lock writeLock = lock.writeLock();

		Shared shared = new Shared(readLock, writeLock);

		MyRunnable myRunnable = new MyRunnable(shared);

		for (int i = 0; i < 5; i++) {
			executor.execute(myRunnable);
		}

	}

}

class MyRunnable implements Runnable {

	Shared shared;

	public MyRunnable(Shared s) {
		super();
		shared = s;
	}

	@Override
	public void run() {
		shared.readtest();
	}

}

class Shared {

	List<Integer> lst = new ArrayList<Integer>();

	Lock readLock;
	Lock writeLock;

	public Shared(Lock re, Lock wr) {
		super();
		readLock = re;
		writeLock = wr;
	}

	int num = 1;

	public void readtest() {
		readLock.lock();
		System.out.println("size is " + lst.size());
		num += 1;
		readLock.unlock();

		writeLock.lock();
		System.out.println(" add element is " + num);
		lst.add(num);
		writeLock.unlock();

	}

}
