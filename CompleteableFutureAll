import java.lang.annotation.Retention;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

public class CompletableFutureAll {
	
	
	public static void main(String args[]) throws  InterruptedException, ExecutionException  {
	
		CompletableFuture<String> completableFuture1 
											= CompletableFuture.supplyAsync(
													() -> {
														try {
															TimeUnit.SECONDS.sleep(2);
														} catch (InterruptedException e) {
															// TODO Auto-generated catch block
															e.printStackTrace();
														}
														return "test1";
													
        });
		
		CompletableFuture<String> completableFuture2 
		= CompletableFuture.supplyAsync(
				() -> {
					try {
						TimeUnit.SECONDS.sleep(5);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					return "test3";
				
		});

		
		
		List<CompletableFuture<String>> completableFutures =
				Arrays.asList(completableFuture1,completableFuture2);
		CompletableFuture<Void> resultantCf = 
					CompletableFuture.allOf(completableFutures.toArray(new CompletableFuture[completableFutures.size()]));

        CompletableFuture<List<String>> allFutureResults = 
        		resultantCf.thenApply(t -> completableFutures.stream().map(CompletableFuture::join).collect(Collectors.toList()));

        System.out.println("Result - " + allFutureResults.get());
        TimeUnit.SECONDS.sleep(1);
		

	}
	
	
	

}
