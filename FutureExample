package threadSample;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Resource {

	public static synchronized void iterator() {
		// synchronized (Resource.class) { // class level synchronized
		// synchronized (this) { // object level
		for (int i = 1; i < 5; i++) {
			System.out.println("=========> " + Thread.currentThread().getName());
		}

		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

//	}

}

class MyCallable implements Callable<Integer> {

	int val = 0;

	@Override
	public Integer call() throws Exception {
		// TODO Auto-generated method stub
		return val++;
	}

}

public class ThreadSample {
	public static void main(String args[]) {
		MyCallable myCallable = new MyCallable();

		List<Future<Integer>> res = new ArrayList<>();

		ExecutorService service = Executors.newFixedThreadPool(5);

		for (int i = 0; i < 5; i++) {
			Future<Integer> f = service.submit(myCallable);
			while (!f.isDone()) {
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println(" Waiting.........");
			}

			res.add(f);

		}

		res.forEach((ans) -> {
			try {
				System.out.println(" ---> " + ans.get());
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});

		// System.out.println(" Cllable NOT done ");

	}
}
