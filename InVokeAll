package javaItr3;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class App {

	public static void main(String args[]) {

		ExecutorService service = Executors.newFixedThreadPool(3);

		List<MyCallable> taskList = new ArrayList<>();
		for (int i = 0; i < 5; i++) {
			MyCallable task = new MyCallable("Task-" + i);
			taskList.add(task);
		}

		List<Future<String>> resultList = null;
		try {
			resultList = service.invokeAll(taskList);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		service.shutdown();

		System.out.println("\n========Printing the results======");

		for (int i = 0; i < resultList.size(); i++) {
			Future<String> future = resultList.get(i);
			try {
				String result = future.get();
				System.out.println(result + ": ");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}
}

class MyCallable implements Callable<String> {

	private String name;

	public MyCallable(String name) {
		super();
		this.name = name;
	}

	@Override
	public String call() throws Exception {

		return Thread.currentThread().getName();
	}

}
