package object;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

import javax.annotation.processing.Completion;

public class GenericsExample {

	public static void main(String args[]) throws InterruptedException, ExecutionException {

		// TestGenerics<String> testGenerics = new TestGenerics("123");

//		System.out.print(" dta is " + testGenerics.getData());

		TestGenerics<Dummy> testGenericsObject = new TestGenerics(new Dummy(222));
		System.out.println("Dummy dta is " + testGenericsObject.getData().toString());

		TestGenerics<Dummy> testGenericsObject1 = new TestGenerics(new Dummy(007, "dummyName"));
		System.out.println("Dummy dta1  is " + testGenericsObject1.getData().toString());
	}

}

class TestGenerics<T> {

	T data;

	public TestGenerics(T data) {
		super();
		this.data = data;
	}

	public T getData() {
		return data;
	}

}

class Dummy {
	private int id;

	private String name;

	public Dummy(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	@Override
	public String toString() {
		return "Dummy [id=" + id + ", name=" + name + "]";
	}

	public Dummy(int id) {
		super();
		this.id = id;
	}

}
