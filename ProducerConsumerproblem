package threadSample;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;

public class ThreadSample {

	public static void main(String args[]) {

		BlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();

		Runnable producer = () -> {
			int i = 1;
			while (true) {
				try {
					queue.put(i);
					System.out.println(" Added " + i + " to queue ");
					i++;
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		};

		new Thread(producer).start();

		Runnable consumer = () -> {
			while (true) {
				try {
					int readValue = queue.take();
					System.out.println(" read value  " + readValue + " from queue ");
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		};

		new Thread(consumer).start();

	}

}
