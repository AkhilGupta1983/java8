package javaItr3;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class App {

	public static void main(String args[]) {
		ExecutorService service = Executors.newFixedThreadPool(5);

		Lock l = new ReentrantLock();
		Lock l1 = new ReentrantLock();

		Runnable r = () -> {
			synchronized (l) {
				try {
					System.out.println("Thread entered waiting is " + Thread.currentThread().getName());
					l.wait();
					// countDownLatch.await();
					System.out.println("Thread running is " + Thread.currentThread().getName());
					TimeUnit.MILLISECONDS.sleep(2000);

				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		};

		for (int i = 0; i < 5; i++) {
			service.execute(r);
		}

		new Thread(() -> {
			synchronized (l) {

				l.notifyAll();
			}
		}).start();

		service.shutdown();

		// service.awaitTermination(0, null)

		System.out.println(" Threads notified .......");
	}
}
